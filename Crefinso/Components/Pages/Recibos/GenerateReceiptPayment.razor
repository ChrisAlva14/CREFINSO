@page "/generateReceiptPayment/{pagoId:int}"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject PaymentServices paymentService

@using Crefinso.DTOs
@using Crefinso.Services.Pagos


@if (pagoCompleto == null)
{
    <p>Cargando...</p>
}
else
{
    <div class="h-full p-4 dark-text-secondary">
        <div class="max-w-5xl mx-auto flex flex-col lg:flex-row gap-6">
            <!-- Contenido principal -->
            <section id="printable-section" class="printable-area flex-1 rounded-lg border">
                <div class="rounded-lg bg-white p-6 shadow-lg">
                    <!-- Encabezado -->
                    <div class="space-y-2 border-b border-gray-200 pb-4 text-center">
                        <div class="flex items-center justify-between">
                            <!-- Logo -->
                            <div class="flex flex-1 justify-start">
                                <img alt="Crefinso Logo" width="160" height="48" class="mb-4" src="logoCrefinsowhite.png" id="logo" />
                            </div>
                            <!-- Recibo de Ingreso -->
                            <div class="flex flex-1 justify-end">
                                <div class="border-2 border-red-600 px-4 py-2">
                                    <p class="text-sm font-bold text-red-600">RECIBO DE INGRESO</p>
                                    <p class="text-center text-xl font-bold text-red-600">@pagoCompleto.PagoId</p>
                                </div>
                            </div>
                        </div>
                        <!-- Nombre de la Asociación -->
                        <div class="mt-4 w-full text-center">
                            <h1 class="text-xl font-bold">ASOCIACIÓN COOPERATIVA DE AHORRO Y CRÉDITO</h1>
                            <h2 class="text-lg font-semibold">CRECIMIENTO FINANCIERO DE SONSONATE DE R.L.</h2>
                        </div>
                        <!-- Título del comprobante -->
                        <div class="mt-4 text-center font-semibold">COMPROBANTE DE PAGO DE PRÉSTAMO</div>
                    </div>

                    <!-- Información del cliente -->
                    <div class="mt-4 grid grid-cols-1 gap-4 rounded-lg border border-gray-200 bg-white p-4 md:grid-cols-2">
                        <div>
                            <div class="mb-1 flex items-center gap-2 text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user h-4 w-4">
                                    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="12" cy="7" r="4"></circle>
                                </svg>
                                <span class="text-sm">Nombre</span>
                            </div>
                            <p class="text-sm font-semibold">@pagoCompleto.Cliente?.Nombre</p>
                        </div>
                        <div>
                            <div class="mb-1 flex items-center gap-2 text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-hash h-4 w-4">
                                    <line x1="4" x2="20" y1="9" y2="9"></line>
                                    <line x1="4" x2="20" y1="15" y2="15"></line>
                                    <line x1="10" x2="8" y1="3" y2="21"></line>
                                    <line x1="16" x2="14" y1="3" y2="21"></line>
                                </svg>
                                <span class="text-sm">Código Cliente</span>
                            </div>
                            <p class="text-sm font-semibold">@pagoCompleto.Cliente?.ClienteId</p>
                        </div>
                        <div>
                            <div class="mb-1 flex items-center gap-2 text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar-days h-4 w-4">
                                    <path d="M8 2v4"></path>
                                    <path d="M16 2v4"></path>
                                    <rect width="18" height="18" x="3" y="4" rx="2"></rect>
                                    <path d="M3 10h18"></path>
                                    <path d="M8 14h.01"></path>
                                    <path d="M12 14h.01"></path>
                                    <path d="M16 14h.01"></path>
                                    <path d="M8 18h.01"></path>
                                    <path d="M12 18h.01"></path>
                                    <path d="M16 18h.01"></path>
                                </svg>
                                <span class="text-sm">Fecha de Pago:</span>
                            </div>
                            <p class="text-sm font-semibold">@pagoCompleto.FechaPago.ToShortDateString()</p>
                        </div>
                        <div>
                            <div class="mb-1 flex items-center gap-2 text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-receipt h-4 w-4">
                                    <path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path>
                                    <path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"></path>
                                    <path d="M12 17.5v-11"></path>
                                </svg>
                                <span class="text-sm">Pago de Cuota:</span>
                            </div>
                            <p class="text-sm font-semibold text-blue-600">$ @pagoCompleto.MontoPagado</p>
                        </div>
                    </div>

                    <!-- Detalles del pago -->
                    <div class="mt-4 rounded-lg border border-gray-200 bg-white p-4">
                        <table class="w-full text-sm">
                            <tbody>
                                <tr class="border-b border-gray-200">
                                    <td class="py-2 font-medium">SALDO ANTERIOR</td>
                                    <td class="py-2 text-right">$ @pagoCompleto.Prestamo?.MontoAprobado</td>
                                </tr>
                                <tr class="border-b border-gray-200">
                                    <td class="py-2 font-medium">CAPITAL</td>
                                    <td class="py-2 text-right">$ @pagoCompleto.Prestamo?.MontoAprobado</td>
                                </tr>
                                <tr class="border-b border-gray-200">
                                    <td class="py-2 font-medium">INTERES</td>
                                    <td class="py-2 text-right">$ @pagoCompleto.Prestamo?.TasaInteres</td>
                                </tr>
                                <tr>
                                    <td class="py-2 font-medium">NUEVO SALDO</td>
                                    <td class="py-2 text-right font-semibold">$ @(pagoCompleto.Prestamo?.MontoAprobado - pagoCompleto.MontoPagado)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Firmas -->
                    <div class="grid grid-cols-2 gap-6 pt-8">
                        <div class="text-center">
                            <div class="border-t border-gray-300 pt-2">
                                <p class="text-sm font-semibold">@pagoCompleto.Usuario?.UserName</p>
                                <p class="text-xs text-gray-500">Recibió</p>
                            </div>
                        </div>
                        <div class="text-center">
                            <div class="border-t border-gray-300 pt-2">
                                <p class="text-sm font-semibold">@pagoCompleto.Cliente?.Nombre</p>
                                <p class="text-xs text-gray-500">Entregó</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Botones de acción -->
            <div class="lg:w-48 print:hidden">
                <div class="bg-white p-4 border rounded-lg shadow-lg lg:sticky lg:top-4">
                    <div class="flex flex-row lg:flex-col gap-2">
                        <button @onclick="ViewReceipt" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 bg-black text-white hover:bg-primary/90 h-10 px-4 py-2 flex-1 gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download h-4 w-4">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                <polyline points="7 10 12 15 17 10"></polyline>
                                <line x1="12" x2="12" y1="15" y2="3"></line>
                            </svg>
                            Descargar PDF
                        </button>
                        <button @onclick="PrintReceipt" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 flex-1 gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-printer h-4 w-4">
                                <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path>
                                <path d="M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6"></path>
                                <rect x="6" y="14" width="12" height="8" rx="1"></rect>
                            </svg>
                            Imprimir
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int PagoId { get; set; }

    private PagoCompletoResponse pagoCompleto;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener todos los pagos completos
            var pagosCompletos = await paymentService.GetPagosCompletos();

            // Filtrar el pago específico usando el PaymentId
            pagoCompleto = pagosCompletos.FirstOrDefault(p => p.PagoId == PagoId);

            if (pagoCompleto == null)
            {
                // Mostrar un mensaje de error o redirigir a una página de error
                Console.Error.WriteLine("No se encontró el pago con el ID proporcionado.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar el pago: {ex.Message}");
        }
    }

    private async Task ViewReceipt()
    {
        // Genera el PDF (aquí debes tener la lógica para generar el PDF)
        var pdfBytes = GeneratePdf();

        // Convierte el PDF a base64
        var base64Pdf = Convert.ToBase64String(pdfBytes);

        // Crea la URL del PDF
        var pdfUrl = $"data:application/pdf;base64,{base64Pdf}";

        // Abre el PDF en una nueva pestaña usando JavaScript
        await JS.InvokeVoidAsync("openPdfInNewTab", pdfUrl);
    }

    private byte[] GeneratePdf()
    {
        // Aquí debes implementar la lógica para generar el PDF
        // Por ejemplo, usando una librería como iTextSharp o cualquier otra
        // Retorna el PDF como un array de bytes
        return new byte[] { /* PDF bytes */ };
    }

    private async Task PrintReceipt()
    {
        await JS.InvokeVoidAsync("printSection", "printable-section");
    }
}