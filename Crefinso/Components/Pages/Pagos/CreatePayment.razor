@page "/createPayment/{pagoId:int}"
@using Crefinso.Services.Pagos
@using Crefinso.DTOs
@inject IJSRuntime JS
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject PaymentServices paymentService
@using Crefinso.Services.Prestamos
@inject LoanServices loanService

@code {
    [Parameter]
    public int PagoId { get; set; } // Captura el parámetro de la ruta

    private string errorMessage;
    private PagoRequest newPayment = new PagoRequest();

    protected override async Task OnInitializedAsync()
    {
        // Puedes usar PagoId para cargar datos relacionados con el pago
        Console.WriteLine($"PagoId recibido: {PagoId}");
    }

    // Método para manejar el clic en el botón "Cancelar"
    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/payments");
    }

    // CREAR NUEVO PAGO
    private async Task HandleCreatePayment()
    {
        try
        {
            // Validar que el monto pagado sea un número válido
            if (!decimal.TryParse(newPayment.MontoPagado, out decimal montoPagado))
            {
                await Swal.FireAsync("Error", "El monto pagado no es válido.", SweetAlertIcon.Error);
                return;
            }

            // Registrar el pago
            bool success = await paymentService.PostPayment(newPayment);
            if (success)
            {
                // Obtener el préstamo asociado al pago
                var prestamo = await loanService.GetLoanById(newPayment.PrestamoId);
                if (prestamo == null)
                {
                    await Swal.FireAsync("Error", "No se encontró el préstamo asociado.", SweetAlertIcon.Error);
                    return;
                }

                // Convertir el MontoAprobado a decimal
                if (!decimal.TryParse(prestamo.MontoAprobado, out decimal montoAprobado))
                {
                    await Swal.FireAsync("Error", "El monto aprobado no es válido.", SweetAlertIcon.Error);
                    return;
                }

                // Calcular el plazo del préstamo en meses
                int plazoEnMeses = (prestamo.FechaVencimiento.Year - prestamo.FechaInicio.Year) * 12 + prestamo.FechaVencimiento.Month - prestamo.FechaInicio.Month;

                // Calcular el monto mensual esperado
                decimal montoEsperado = montoAprobado / plazoEnMeses;

                // Calcular la diferencia entre el monto pagado y el monto esperado
                decimal diferencia = montoPagado - montoEsperado;

                // Si hay diferencia, ajustar los pagos futuros
                if (diferencia != 0)
                {
                    var pagosFuturos = await paymentService.GetPagosFuturos(newPayment.PrestamoId);
                    if (pagosFuturos != null && pagosFuturos.Any())
                    {
                        foreach (var pagoFuturo in pagosFuturos)
                        {
                            decimal montoFuturo = decimal.Parse(pagoFuturo.MontoAPagar);
                            montoFuturo -= (diferencia / pagosFuturos.Count);
                            pagoFuturo.MontoAPagar = montoFuturo.ToString("F2");

                            // Actualizar el pago futuro en la base de datos
                            await paymentService.UpdatePago(pagoFuturo);
                        }
                    }
                }

                // Limpiar el formulario
                newPayment = new PagoRequest();

                // Mostrar una alerta de éxito
                await Swal.FireAsync("Éxito", "Pago registrado correctamente.", SweetAlertIcon.Success);

                // Redirigir a la página de pagos
                Console.WriteLine("Redirigiendo a /payments...");
                NavigationManager.NavigateTo("/payments");
            }
            else
            {
                await Swal.FireAsync("Error", "No se pudo registrar el pago.", SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"Error en HandleCreatePayment: {ex.Message}");
            await Swal.FireAsync("Error", "Hubo un error al registrar el pago.", SweetAlertIcon.Error);
        }
    }

    // Propiedad auxiliar para la conversión de ClienteID a string
    private string PrestamoIDString
    {
        get => newPayment.PrestamoId.ToString();
        set
        {
            if (int.TryParse(value, out int id))
            {
                newPayment.PrestamoId = id;
            }
        }
    }
}

<section class="w-full flex items-center justify-center p-6">
    <div class="rounded-lg border bg-white text-gray-900 w-full max-w-4xl shadow-xl">
        <div class="flex flex-col p-6 space-y-1">
            <h3 class="tracking-tight text-3xl font-bold text-center">Crear Nuevo Pago</h3>
            <p class="text-sm text-gray-500 text-center">Ingrese los detalles del nuevo pago</p>
        </div>
        <div class="p-6 pt-0">
            <EditForm class="space-y-6" Model="newPayment" OnValidSubmit="HandleCreatePayment">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-2">
                        <label class="text-sm font-medium flex items-center gap-2" for="PrestamoId">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text w-4 h-4">
                                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
                                <polyline points="14 2 14 8 20 8"></polyline>
                                <line x1="16" x2="8" y1="13" y2="13"></line>
                                <line x1="16" x2="8" y1="17" y2="17"></line>
                                <line x1="10" x2="8" y1="9" y2="9"></line>
                            </svg>
                            Código del Préstamo
                        </label>
                        <InputText @bind-Value="PrestamoIDString" class="flex h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full" id="PrestamoId" required type="number" min="1" name="PrestamoId" placeholder="Ingrese el ID del préstamo..." />
                    </div>
                    <div class="space-y-2">
                        <label class="text-sm font-medium flex items-center gap-2" for="FechaPago">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar w-4 h-4">
                                <path d="M8 2v4"></path>
                                <path d="M16 2v4"></path>
                                <rect width="18" height="18" x="3" y="4" rx="2"></rect>
                                <path d="M3 10h18"></path>
                            </svg>
                            Fecha de Pago
                        </label>
                        <InputDate @bind-Value="newPayment.FechaPago" class="flex h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full" id="FechaPago" required name="FechaPago" />
                    </div>
                    <div class="space-y-2">
                        <label class="text-sm font-medium flex items-center gap-2" for="MontoPagado">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-dollar-sign w-4 h-4">
                                <line x1="12" x2="12" y1="2" y2="22"></line>
                                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                            </svg>
                            Monto Pagado
                        </label>
                        <InputText @bind-Value="newPayment.MontoPagado" class="flex h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full" id="MontoPagado" required name="MontoPagado" placeholder="Ingrese el monto pagado..." autocomplete="off" />
                    </div>
                    <div class="space-y-2">
                        <label class="text-sm font-medium flex items-center gap-2" for="SaldoAcumulado">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-dollar-sign w-4 h-4">
                                <line x1="12" x2="12" y1="2" y2="22"></line>
                                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                            </svg>
                            Saldo Acumulado
                        </label>
                        <InputText @bind-Value="newPayment.SaldoAcumulado" class="flex h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full" id="SaldoAcumulado" required name="SaldoAcumulado" placeholder="Ingrese el saldo acumulado..." autocomplete="off" />
                    </div>
                    <div class="space-y-2">
                        <label class="text-sm font-medium flex items-center gap-2" for="Estado">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-circle w-4 h-4">
                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                <polyline points="22 4 12 14.01 9 11.01"></polyline>
                            </svg>
                            Estado
                        </label>
                        <InputSelect @bind-Value="newPayment.Estado" class="flex h-10 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full" id="Estado" required name="Estado">
                            <option value="">Selecciona una Opción</option>
                            <option value="Pendiente">Pendiente</option>
                            <option value="Realizado">Realizado</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="flex justify-end space-x-4">
                    <button class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none border border-red-300 bg-white hover:bg-red-500 text-black-900 h-10 px-4 py-2" type="button" @onclick="HandleCancel">
                        Cancelar
                    </button>
                    <button class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none bg-green-500 text-white hover:bg-green-600 h-10 px-4 py-2" type="submit">
                        Guardar Pago
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</section>